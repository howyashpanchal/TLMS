datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserType {
  TENANT
  LANDLORD
  PROPERTY_MANAGER
  ADMIN
}

enum LeaseStatus {
  DRAFT
  ACTIVE
  EXPIRED
  RENEWED
  TERMINATED
}

enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
  PARTIAL
  FAILED
}

enum MaintenancePriority {
  EMERGENCY
  HIGH
  MEDIUM
  LOW
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String
  firstName       String
  lastName        String
  userType        UserType
  phone           String?
  isEmailVerified Boolean   @default(false)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  managedProperties   Property[]
  leases              Lease[]
  payments            Payment[]
  documents           Document[]
  notifications       Notification[]
  maintenanceRequests MaintenanceRequest[]
}

model Property {
  id                 String               @id @default(uuid())
  address            String
  city               String
  state              String
  zipCode            String
  yearBuilt          Int?
  amenities          String[]
  owner              User                 @relation(fields: [ownerId], references: [id])
  ownerId            String
  manager            User?                @relation(fields: [managerId], references: [id])
  managerId          String?
  units              Unit[]
  documents          Document[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  MaintenanceRequest MaintenanceRequest[]
}

model Unit {
  id                 String               @id @default(uuid())
  property           Property             @relation(fields: [propertyId], references: [id])
  propertyId         String
  unitNumber         String
  bedrooms           Int
  bathrooms          Float
  squareFootage      Int
  rentAmount         Float
  depositAmount      Float
  isOccupied         Boolean              @default(false)
  features           Json? // Flexible storage for unit features
  leases             Lease[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  MaintenanceRequest MaintenanceRequest[]
}

model Lease {
  id              String         @id @default(uuid())
  tenant          User           @relation(fields: [tenantId], references: [id])
  tenantId        String
  unit            Unit           @relation(fields: [unitId], references: [id])
  unitId          String
  startDate       DateTime
  endDate         DateTime
  status          LeaseStatus    @default(DRAFT)
  paymentDueDay   Int            @default(1)
  paymentAmount   Float
  securityDeposit Float
  utilities       String[]
  documents       Document[]
  payments        Payment[]
  renewals        LeaseRenewal[] @relation("LeaseRenewals")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  LeaseRenewal    LeaseRenewal[]
  // LeaseRenewal    LeaseRenewal[]
  // LeaseRenewal    LeaseRenewal[]
}

model LeaseRenewal {
  id              String   @id @default(uuid())
  originalLease   Lease    @relation("OriginalLease", fields: [originalLeaseId], references: [id])
  originalLeaseId String
  newLease        Lease    @relation("RenewedLease", fields: [newLeaseId], references: [id])
  newLeaseId      String
  renewedAt       DateTime @default(now())
  termsChanged    Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Lease           Lease?   @relation(fields: [leaseId], references: [id])
  leaseId         String?

  @@unique([originalLeaseId, newLeaseId])
}

model Payment {
  id              String        @id @default(uuid())
  lease           Lease         @relation(fields: [leaseId], references: [id])
  leaseId         String
  amount          Float
  transactionDate DateTime
  dueDate         DateTime
  status          PaymentStatus
  method          String // Credit Card, Bank Transfer, etc.
  transactionId   String?
  lateFee         Float         @default(0)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?
}

model MaintenanceRequest {
  id           String              @id @default(uuid())
  property     Property            @relation(fields: [propertyId], references: [id])
  propertyId   String
  unit         Unit?               @relation(fields: [unitId], references: [id])
  unitId       String?
  reportedBy   User                @relation(fields: [reportedById], references: [id])
  reportedById String
  title        String
  description  String
  priority     MaintenancePriority
  status       String              @default("PENDING")
  assignedTo   User?               @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  costEstimate Float?
  actualCost   Float?
  completedAt  DateTime?
  photos       String[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model Document {
  id           String    @id @default(uuid())
  type         String // Lease, ID, Invoice, etc.
  name         String
  fileUrl      String
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById String
  lease        Lease?    @relation(fields: [leaseId], references: [id])
  leaseId      String?
  property     Property? @relation(fields: [propertyId], references: [id])
  propertyId   String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Notification {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  type            String // Payment, Maintenance, System
  title           String
  message         String
  isRead          Boolean  @default(false)
  relatedEntityId String? // ID of related lease/payment/etc
  createdAt       DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String // CREATE, UPDATE, DELETE
  entityType String // User, Property, Lease, etc.
  entityId   String
  userId     String?
  details    Json?
  createdAt  DateTime @default(now())
}
